function fegui;
%
% graphical user interface to the fastECM program
%
% (c) Alle Meije Wink -- 16/03/2012
%     a.m.winkATgmail.com
%
% If you use this program in your research, remember to cite this paper
% in the journal "Brain Connectivity":
% 
% Alle Meije Wink, Jan C de Munck, Ysbrand D van der Werf, Odile A van den heuvel, Frederik Barkhof
% "Fast eigenvector centrality mapping of voxel-wise connectivity in functional MRI: implementation, validation and interpretation."
% URL: http://online.liebertpub.com/doi/abs/10.1089/brain.2012.0087
%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% build the window & gui objects
%

% delete existing guis and make current one
fegui=findobj('tag', 'fegui');
delete(fegui);
fegui=figure('tag', 'fegui', ...
	     'menubar', 'none', ...
	     'name', 'fast ECM', 'numbertitle', 'off');

% add components
h.dc = uicontrol (fegui, ...
		  'style', 'text', ...
		  'string', 'working directory:', ...
		  'visible', 'on', ...
		  'units', 'normalized', ...
		  'tag', 'thedircaption', ...
		  'horizontalalignment', 'left', ...
		  'tooltipstring', 'current directory / directory of latest added files', ...
		  'backgroundcolor', [.8 .8 .8], ...
			 'position', [.05 .9 .4 .05]);

h.dv = uicontrol (fegui, ...
		  'style', 'edit', ...
		  'string', pwd, ...
		  'visible', 'on', ...
		  'units', 'normalized', ...
		  'tag', 'thedirvalue', ...
		  'horizontalalignment', 'left', ...
		  'position', [.05 .8 .4 .05]);

h.fc = uicontrol (fegui, ...
		  'style', 'text', ...
		  'string', 'selected files:', ...
		  'visible', 'on', ...
		  'units', 'normalized', ...
		  'tag', 'thefilescaption', ...
		  'horizontalalignment', 'left', ...
		  'backgroundcolor', [.8 .8 .8], ...
		  'tooltipstring', 'current selection of files whose fECM will be computed', ...
		  'position', [.05 .6 .4 .05]);

h.fv = uicontrol (fegui, ...
		  'style', 'listbox', ...
		  'string', '', ...
		  'visible', 'on', ...
		  'units', 'normalized', ...
		  'tag', 'thefilesvalue', ...
		  'horizontalalignment', 'left', ...
		  'position', [.05 .10 .4 .45]);

h.sb = uicontrol (fegui, ...
		  'style', 'pushbutton', ...
		  'string', 'add files', ...
		  'tag', 'selectbutton', ...
		  'visible', 'on', ...
		  'units', 'normalized', ...
		  'tooltipstring', 'add files to the selection of fECM inputs', ...
		  'Position', [.55 .9 .4 .05 ]);

h.gb = uicontrol (fegui, ...
		  'style', 'pushbutton', ...
		  'string', 'estimate fECM', ...
		  'tag', 'gobutton', ...
		  'visible', 'on', ...
		  'units', 'normalized', ...
		  'tooltipstring', 'start computing the fECM of each input in the current selection', ...
		  'Position', [.55 .8 .4 .05 ]);

h.rv = uicontrol (fegui, ...
		  'style', 'checkbox', ...
		  'value', 0, ...
		  'visible', 'on', ...
		  'units', 'normalized', ...
		  'tag', 'rankvalue', ...
		  'horizontalalignment', 'left', ...
		  'backgroundcolor', [.8 .8 .8], ...
		  'position', [.55 .7 .05 .05]);

h.rc = uicontrol (fegui, ...
		  'style', 'text', ...
		  'string', 'EC rank', ...
		  'visible', 'on', ...
		  'units', 'normalized', ...
		  'tag', 'rankcaption', ...
		  'horizontalalignment', 'left', ...
		  'backgroundcolor', [.8 .8 .8], ...
		  'tooltipstring', sprintf('produce fECM rank maps, with\na uniform distribution on ]0, 1['), ...
		  'position', [.6 .7 .15 .05]);

h.nv = uicontrol (fegui, ...
		  'style', 'checkbox', ...
		  'value', 0, ...
		  'visible', 'on', ...
		  'units', 'normalized', ...
		  'tag', 'normvalue', ...
		  'horizontalalignment', 'left', ...
		  'backgroundcolor', [.8 .8 .8], ...
		  'position', [.75 .7 .05 .05]);

h.nc = uicontrol (fegui, ...
		  'style', 'text', ...
		  'string', 'EC norm', ...
		  'visible', 'on', ...
		  'units', 'normalized', ...
		  'tag', 'normcaption', ...
		  'horizontalalignment', 'left', ...
		  'backgroundcolor', [.8 .8 .8], ...
		  'tooltipstring', sprintf('compute fECM maps with N(0, 1)\ndistributed values, via fECM ranks'), ...
		  'position', [.8 .7 .15 .05]);

h.iv = uicontrol (fegui, ...
		  'style', 'slider', ...
		  'min', 0, 'max', 100, 'value', 50, ...
		  'visible', 'on', ...
		  'units', 'normalized', ...
		  'tag', 'itervalue', ...
		  'horizontalalignment', 'left', ...
		  'backgroundcolor', [.8 .8 .8], ...
		  'position', [.55 .61 .15 .05]);

h.ie = uicontrol (fegui, ...
		  'style', 'edit', ...
		  'visible', 'on', ...
		  'string', '50', ...
		  'units', 'normalized', ...
		  'tag', 'iteredit', ...
		  'horizontalalignment', 'left', ...
		  'backgroundcolor', [.8 .8 .8], ...
		  'position', [.725 .61 .05 .05]);

h.ic = uicontrol (fegui, ...
		  'style', 'text', ...
		  'string', 'max. it.', ...
		  'visible', 'on', ...
		  'units', 'normalized', ...
		  'tag', 'itercaption', ...
		  'horizontalalignment', 'left', ...
		  'backgroundcolor', [.8 .8 .8], ...
		  'tooltipstring', sprintf('maximum number of iterations\n(in the case of no convergence)\nfor the fECM algorithm'), ...
		  'position', [.8 .6 .15 .05]);

h.ov = uicontrol (fegui, ...
		  'style', 'listbox', ...
		  'string', 'output log', ...
		  'visible', 'on', ...
		  'units', 'normalized', ...
		  'tag', 'theoutputvalue', ...
		  'horizontalalignment', 'left', ...
		  'position', [.55 .10 .4 .45]);

set(h.gb, 'callback', {@doecm, h});
set(h.sb, 'callback', {@getfiles, h});
set(h.fv, 'callback', {@savfiles, h});
set(h.fv, 'buttondownfcn', @(s, e)clrfiles(h));
set(h.ie, 'callback', {@upd_slider, h});
set(h.iv, 'callback', {@upd_edit, h});
set(h.ov, 'callback', {@sav, h});
set(h.ov, 'buttondownfcn', @(s, e)clr(h));

return;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% execute fastECM on the selected files with selected options
%

function doecm(callingObject, event, h);

fnames = get(h.fv, 'string');

if ~strcmp(fnames, '')
  dorank=get(h.rv, 'value');
  donorm=get(h.nv, 'value');
  maxiter=get(h.iv, 'value');
  set(h.ov, 'string', '');
  set(h.ov, 'value', 1);
  drawnow;
  for i=1:length(fnames)
    cmd=sprintf('fastECM(''%s'', %d, %d, %d)', fnames{i}, dorank, donorm, maxiter);
    set(h.ov, 'string', [get(h.ov, 'string');{['running ' cmd ' ...']}]);
    set(h.ov, 'listboxtop', length(get(h.ov, 'string')))
    drawnow;
    cmdlog=evalc(cmd);
    cmdlog=strread(cmdlog, '%s', 'delimiter', '\n');
    set(h.ov, 'string', [get(h.ov, 'string');cmdlog]);
    drawnow;
  end
end
  
return

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% select more files to be analysed
%

function getfiles(callingObject, event, h);

exts={'*.nii;*.nii.gz;*.img;*.img.gz' 'all image types' ...
      '*.nii'         'nifti files'                     ... 
      '*.nii.gz'      'compressed nifti files'          ...
      '*.img'         'analyze files'                   ...
      '*.img.gz'      'compressed analyze files'        ...
      '*.txt'         'text files with file names'      };    

exts=reshape(exts, 2, 6)';

[fnames, dname] = uigetfile(exts, ...
			    'select file(s) to open', ...
			    'multiselect', 'on');

if (dname)

  if ~iscell(fnames)
    fnames={fnames};
  end
    
  istxt=(strcmp(fnames{1}((end-3):end), '.txt'));
  
  if (istxt)
    txtinputs=fnames;
    fnames=[];
    for i=1:length(txtinputs)
      lines=textread(txtinputs{i}, '%s');
      fnames=[fnames;lines];
    end
  else
    for i=1:length(fnames)
      fnames{i}=[dname fnames{i}];
    end
  end
  
  set(h.dv, 'string', dname);
  set(h.fv, 'string', [get(h.fv, 'string');fnames(:)]);
  set(h.fv, 'value', 1);
  drawnow;
  
  
end
 
return

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% save the selection of files
%

function savfiles(callingObject, event, h);

  [fname, dname] = uiputfile({'*.txt', 'txt files'}, ...
			     'file to save to', 'fegui.txt');
  
  if (fname)
    
    fid = fopen([dname filesep fname], 'w');
    s=get(h.fv, 'string');
    if ~iscell(s)
      s={s};
    end
    for i=1:length(s)
      fprintf(fid, '%s\n', s{i});
    end
    fclose (fid);
  
  end
  
return

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% clear the selection of files
%

function clrfiles(h);

set(h.dv, 'string', pwd);
set(h.fv, 'string', '','value', 0);
  
return

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% change max iterations slider value after changing the edit box
%

function upd_slider(callingObject, event, h);

if( prod(size(str2num(get(h.ie, 'string')))) == 1 )
  
  iv=max(1, min(100, str2num(get(h.ie, 'string'))));
  set(h.ie, 'string', num2str(iv));
  set(h.iv, 'value', iv);
  
else
  
  upd_edit(h.iv, 0, h)
  
end

return

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% change max iterations edit box value after changing the slider
%

function upd_edit(callingObject, event, h);

set(h.iv, 'value', round(get(h.iv, 'value')));
ie=get(h.iv, 'value');
set(h.ie, 'string', num2str(ie));

return

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% save the output log
%

function sav(callingObject, event, h);

  [fname, dname] = uiputfile({'*.txt;*.log', 'txt / log files'}, ...
			     'file to save to', 'fastECM.log');
  if (fname)
    
    fid = fopen([dname filesep fname], 'w');
    s=get(h.ov, 'string');
    if ~iscell(s)
      s={s};
    end
    for i=1:length(s)
      fprintf(fid, '%s\n', s{i});
    end
    fclose (fid);
    
  end
  
return

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% offer to save or clear the output log
%

function clr(h);
 set(h.ov, 'string', 'output log', ...
	  'value', 1);
return
